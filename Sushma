team_details={
   'GT':['GT',20,['Win','Win','Loss','Loss','Win']]
    
   ,'LSG':['LSG',18,['Win','Loss','Loss','Win','Win']]
    
   ,'RR':['RR',16,['Win','Loss','Win','Loss','Loss']]
    
    ,'DC':['DC',14,['Win','Win','Loss','Win','Loss']]
    
    ,'RCB':['RCB',14,['Loss','Win','Win','Loss','Loss']]
   
    ,'KKR':['KKR',12,['Loss','Win','Win','Loss','Win']]
    
    ,'PBKS':['PBKS',12,['Loss','Win','Loss','Win','Loss']]
    
    ,'SRH':['SRH',12,['Win','Loss','Loss','Loss','Loss']]
    
    ,'CSK':['CSK',8,['Loss','Loss','Win','Loss','Win']]
    
    ,'MI':['MI',6,['Loss','Win','Loss','Win','Win']]
}


def retrive_two_losses(team): 
#     iterating using for_loop for reading two consecutive losses
    for result in range(len(team[-1])-1):  
        if team[-1][result]==team[-1][result+1] and team[-1][result]=='Loss':    
            return team[0]

for team in team_details.keys():
    get_team=retrive_two_losses(team_details[team])
    if get_team is not None:
        print(get_team)

def retrive_n_losses_or_wins(team,n):
    for i in range(len(team[-1])-n+1):
        if (team[-1][i:i+n]==['Win']*n) or (team[-1][i:i+n]==['Loss']*n) :
            return team[0]

Y=True
while Y:
    n=int(input('enter the valid  value of consecutive losses or wins: '))
    if n>5:
        continue
    else:
        Y=False

filtered_teams=[]
for team in team_details.keys():
    x=retrive_n_losses_or_wins(team_details[team],n)
    if x is not None:
        filtered_teams.append(x)
        print(x)
        print(filtered_teams)  

sum_of_points=0
for team in filtered_teams:
    sum_of_points+=team_details[team][1]
average_points=sum_of_points/len(filtered_teams)
print(average_points)
